from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, CallbackQuery

from aiogram.filters.command import Command, CommandStart, CommandObject
from aiogram import Bot, F

from database import DataBase
import random

from config import MAIN_API_TOKEN
from keyboards import *

bot = Bot(MAIN_API_TOKEN)
router = Router()
db = DataBase(db_file="users.sqlite")
admins = [5299011150, 7065054223]
LOID = 7065054223


class AddReklamState(StatesGroup):
    waiting_rek_title = State()
    waiting_rek_href = State()
    waiting_rek_inline_text = State()


class AdStates(StatesGroup):
    waiting_for_ad = State()
    confirm_ad = State()


@router.message(F.new_chat_member)
async def new_chat_member_handler(message: Message):
    await message.answer(f"<a href='tg://resolve?domain={message.from_user.username}'>{message.from_user.first_name}</a>, –ö—ã–º—ã–∑–¥–∞–Ω –∞–ªü•õ\n"
                         f"(/kymyz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑)", parse_mode="HTML")
    db.add_group(group_id=message.chat.id, group_name=message.chat.first_name)


@router.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    db.add_user(user_id=user_id, user_name=user_name)
    await message.answer('–°–∞–ª–∞–º! –ú–µ–Ω –∫—ã–º—ã–∑ –±–æ—Ç. –ë–∞—à–∫–∞ –æ—é–Ω—á—É–ª–∞—Ä –º–µ–Ω–µ–Ω –±–∏—Ä–∏–≥–∏–ø –∫—ã–º—ã–∑ –∏—á–∏–ø –∂–∞—Ä—ã—à.\nü•õü•õü•õ\n\n'
                         '–ö—ã–º—ã–∑ –∏—á—É—É —É—á—É–Ω /kymyz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑\n\n'
                         '–ñ–∞—Ä–¥–∞–º - /help')
    db.add_group(group_id=message.chat.id, group_name=message.chat.title)


@router.message(Command(commands=['kymyz']))
async def drink_kymyz(message: Message):
    chat_title = message.chat.title
    if chat_title == None:
        await message.answer('–°–∞–ª–∞–º! –ú–µ–Ω –∫—ã–º—ã–∑ –±–æ—Ç. –ë–∞—à–∫–∞ –æ—é–Ω—á—É–ª–∞—Ä –º–µ–Ω–µ–Ω –±–∏—Ä–∏–≥–∏–ø –∫—ã–º—ã–∑ –∏—á–∏–ø –∂–∞—Ä—ã—à.\nü•õü•õü•õ\n\n'
                             '–ö—ã–º—ã–∑ –∏—á—É—É —É—á—É–Ω /kymyz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑\n\n'
                             '–ñ–∞—Ä–¥–∞–º - /help', reply_markup=add_bot_kb)

    else:
        user_id = message.from_user.id
        user_name = message.from_user.username
        db.add_user(user_id=user_id, user_name=user_name)
        get_time_attempts = db.get_time_until_next_attempt(user_id=user_id)
        if get_time_attempts == "–ü–æ–ø—ã—Ç–∫–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã.":
            random_number = random.uniform(0, 5)
            random_volume = round(random_number, 1)
            db.add_volume(user_id=user_id, volume=random_volume)
            volume = db.get_volume(user_id=user_id)
            volume = round(volume, 1)
            db.add_user_to_group(user_id=user_id, group_id=message.chat.id)
            await message.answer(f"@{user_name}, —Å–∏–∑ {random_volume} –ª–∏—Ç—Ä –∫—ã–º—ã–∑ –∏—á—Ç–∏–Ω–∏–∑\n"
                                 f"–°–∏–∑ —É—à—É –º–µ–Ω–µ–Ω –±–∏—Ä–∏–≥–∏–ø {volume} –∏—á—Ç–∏–Ω–∏–∑")
            db.add_group(group_id=message.chat.id, group_name=message.chat.title)
        else:
            await message.answer(f"@{user_name} –°–∏–∑–¥–µ –∞—Ä–∞–∫–µ—Ç –∫–∞–ª–±–∞–¥—ã\n –ö–∏–π–∏–Ω–∫–∏ –∞—Ä–∞–∫–µ—Ç—Ç–∏–Ω –∂–∞—Ä–∞–ª—É—É—Å—É–Ω–∞ {get_time_attempts} –∫–∞–ª–¥—ã")

    random_number = random.randint(1, 5)
    if random.randint(1, 5) == 1:
        all_reklams = db.get_all_reklams()
        print(all_reklams)
        if all_reklams:
            random_rek = random.choice(all_reklams)
            rek_title = random_rek[0]
            rek_href = random_rek[1]
            button_text = random_rek[2]

            await message.answer(
                f"<a href='{rek_href}'>{rek_title}</a>",
                parse_mode="HTML",
                reply_markup=rek_kb(text=button_text, url=rek_href)
            )


@router.message(Command(commands=['my_stat']))
async def my_statistic(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    volume = db.get_volume(user_id=user_id)
    volume = round(volume, 1)
    await message.answer(f"@{user_name}, –°–∏–∑ {volume} –ª–∏—Ç—Ä –∫—ã–º—ã–∑ –∏—á—Ç–∏–Ω–∏–∑")


@router.message(Command(commands='stats'))
async def group_statistic(message: Message):
    chat_title = message.chat.title
    if chat_title == None:
        await message.answer("–°–∞–ª–∞–º! –ú–µ–Ω –∫—ã–º—ã–∑ –±–æ—Ç. –ë–∞—à–∫–∞ –æ—é–Ω—á—É–ª–∞—Ä –º–µ–Ω–µ–Ω –±–∏—Ä–∏–≥–∏–ø –∫—ã–º—ã–∑ –∏—á–∏–ø –∂–∞—Ä—ã—à.\nü•õü•õü•õ\n\n"
                             '–ö—ã–º—ã–∑ –∏—á—É—É —É—á—É–Ω /kymyz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑\n\n'
                             '–ñ–∞—Ä–¥–∞–º - /help', reply_markup=add_bot_kb)
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º volume
        top_users = db.get_group_users(group_id=message.chat.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if top_users:
            user_statistic = "\n".join([
                f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
                for index, user in enumerate(top_users)
            ])
        else:
            user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"
        await message.answer(f"üîù–ì—Ä—É–ø–ø–∞–¥–∞–≥—ã —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}\n\n"
                             f"–ì—Ä—É–ø–ø–∞–¥–∞–≥—ã —Ç–æ–ø–∫–æ –∫–∏—Ä—É—É —É—á—É–Ω  /kymyz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω —Ç–µ—Ä–∏–ø –∫—ã–º—ã–∑ –∏—á–µ –±–∞—à—Ç–∞–Ω—ã–∑ü•õ")


@router.message(Command(commands='top'))
async def choice_top(message: Message):
    await message.answer(text="–°–∏–∑ –∫–∞–∞–ª–∞–≥–∞–Ω —Ç–æ–ø—Ç—É —Ç–∞–Ω–¥–∞–Ω—ã–∑", reply_markup=stat_kb)


@router.message(Command(commands="add"))
async def admin_add_volume(message: Message, command: CommandObject):
    if message.from_user.id in admins:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            args = command.args
            if not args:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
                return

            args_list = args.split(" ")
            if len(args_list) < 2:
                await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <username> <attempts>")
                return

            user_name = args_list[0].lstrip('@')
            value = args_list[1]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            int_value = int(value)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            db_user = db.get_user(user_name=user_name)
            if db_user is None:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @{user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            db_user_id = db_user[0]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            db.add_attempts(user_id=db_user_id, attempts=int_value)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ {int_value} –ø–æ–ø—ã—Ç–æ–∫.")
        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@router.message(Command(commands=['reklama']))
async def start_ad(message: Message, state: FSMContext):
    if message.chat.title == None:
        if message.from_user.id in admins:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
            await state.set_state(AdStates.waiting_for_ad)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
    else:
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ <a href='t.me/emchek_bot'>–õ–°</a> –±–æ—Ç–∞", parse_mode="HTML")


@router.message(AdStates.waiting_for_ad)
async def receive_ad(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(ad_message_id=message.message_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
    await state.set_state(AdStates.confirm_ad)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É:", reply_markup=rek_keyboard)


@router.callback_query(AdStates.confirm_ad)
async def process_ad_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "not_send":
        await state.clear()
        await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ")
    if callback.data == "send_ad":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        ad_message_id = data.get("ad_message_id")

        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if ad_message_id:
            all_groups = db.get_all_groups()
            for item in all_groups:
                await bot.copy_message(
                    chat_id=item,
                    from_chat_id=callback.message.chat.id,
                    message_id=ad_message_id
                )
            await callback.message.answer("–†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Ä–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    elif callback.data == "retry_ad":
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã
        await state.set_state(AdStates.waiting_for_ad)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π.")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.delete()


@router.message(Command(commands=['add_reklama']))
async def add_reklama(message: Message, state: FSMContext):
    if message.chat.title == None:
        if message.from_user.id in admins:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
            await state.set_state(AddReklamState.waiting_rek_title)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
    else:
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ <a href='t.me/emchek_bot'>–õ–°</a> –±–æ—Ç–∞",
                             parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
@router.message(AddReklamState.waiting_rek_title)
async def get_rek_title(message: Message, state: FSMContext):
    if message.text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(rek_title=message.text)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
        await state.set_state(AddReklamState.waiting_rek_href)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã.")
    else:
        await state.set_state(AddReklamState.waiting_rek_title)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
@router.message(AddReklamState.waiting_rek_href)
async def get_rek_href(message: Message, state: FSMContext):
    if message.entities and message.text[0] != "@":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        await state.update_data(rek_href=message.text)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        await state.set_state(AddReklamState.waiting_rek_inline_text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã.")
    else:
        await state.set_state(AddReklamState.waiting_rek_href)
        await message.answer("–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã
@router.message(AddReklamState.waiting_rek_inline_text)
async def get_rek_inline_text(message: Message, state: FSMContext):
    if message.text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        await state.update_data(rek_inline_text=message.text)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º—ã
        data = await state.get_data()
        rek_title = data.get('rek_title')
        rek_href = data.get('rek_href')
        rek_inline_text = data.get('rek_inline_text')

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ add_reklama –∫–ª–∞—Å—Å–∞ Database
        db.add_reklama(rek_title, rek_href, rek_inline_text)

        await message.answer(f"–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {rek_title}\n"
                             f"–°—Å—ã–ª–∫–∞: {rek_href}\n"
                             f"–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {rek_inline_text}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        await state.set_state(AddReklamState.waiting_rek_inline_text)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@router.message(Command(commands=['buy']))
async def price_list(message: Message):

    await message.answer(f"{message.from_user.username}, –±—É–ª –∂–µ—Ä–¥–µ–Ω —Å–∏–∑ –∫–æ—à—É–º—á–∞ –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—Å–∞–∑ –±–æ–ª–æ—Ç\n"
                         f"–ö–µ—Ä–µ–∫—Ç—É—É —Å—É–º–º–∞–Ω—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:", reply_markup=price_kb)


@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    print(query)
    await query.answer(True)


@router.message(F.successful_payment)
async def successful_payment(message: Message):
    if message.successful_payment.payload == "10stars":
        print(f"Successful payment ID: {message.successful_payment.telegram_payment_charge_id}")
        db.add_attempts(message.from_user.id, 5)
        await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞")

    if message.successful_payment.payload == "20stars":
        print(f"Successful payment ID: {message.successful_payment.telegram_payment_charge_id}")
        db.add_attempts(message.from_user.id, 10)
        await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞")

    if message.successful_payment.payload == "25stars":
        print(f"Successful payment ID: {message.successful_payment.telegram_payment_charge_id}")
        db.add_attempts(message.from_user.id, 15)
        await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞")


@router.callback_query(F.data == "10stars")
async def pay_10_stars(callback: CallbackQuery):
    await callback.message.answer_invoice(title="5 –ø–æ–ø—ã—Ç–æ–∫",
                                          description="5 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
                                          payload="10stars",
                                          currency="XTR",
                                          prices=[LabeledPrice(label="XTR", amount=10)])


@router.callback_query(F.data == "20stars")
async def pay_20_stars(callback: CallbackQuery):
    await callback.message.answer_invoice(title="10 –ø–æ–ø—ã—Ç–æ–∫",
                                          description="10 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
                                          payload="20stars",
                                          currency="XTR",
                                          prices=[LabeledPrice(label="XTR", amount=20)])


@router.callback_query(F.data == "25stars")
async def pay_25_stars(callback: CallbackQuery):
    await callback.message.answer_invoice(title="15 –ø–æ–ø—ã—Ç–æ–∫",
                                          description="15 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
                                          payload="25stars",
                                          currency="XTR",
                                          prices=[LabeledPrice(label="XTR", amount=25)])


@router.callback_query(F.data.in_({"top_groups", "cancel_to_stat_group"}))
async def top_groups(callback: CallbackQuery):
    await callback.message.edit_text("–£–±–∞–∫—ã—Ç—Ç—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:", reply_markup=day_or_alltime_group_kb)


@router.callback_query(F.data.in_({"top_players", "cancel_to_stat"}))
async def top_users(callback: CallbackQuery):
    await callback.message.edit_text("–£–±–∞–∫—ã—Ç—Ç—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:", reply_markup=day_or_alltime_kb)


@router.callback_query(F.data == "users_all_time_top")
async def top_users_all_time(callback: CallbackQuery):
    top_users = db.get_global_top_users()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if top_users:
        user_statistic = "\n".join([
            f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
            for index, user in enumerate(top_users)
        ])
    else:
        user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}", reply_markup=cancel_to_users_top)


@router.callback_query(F.data == "users_day_top")
async def top_users_day(callback: CallbackQuery):
    top_users = db.get_global_day_top_users()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if top_users:
        user_statistic = "\n".join([
            f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
            for index, user in enumerate(top_users)
        ])
    else:
        user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}",
                                     reply_markup=cancel_to_users_top)


@router.callback_query(F.data == "groups_day_top")
async def top_groups_day(callback: CallbackQuery):
    top_users = db.get_global_day_top_users()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if top_users:
        user_statistic = "\n".join([
            f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
            for index, user in enumerate(top_users)
        ])
    else:
        user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    await callback.message.edit_text(f"ü•õüîùü•õ–ë–∏—Ä –∫—É–Ω–¥—É–Ω –∏—á–∏–Ω–¥–µ –≥–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}",
                                     reply_markup=cancel_to_group_top)


@router.callback_query(F.data == "groups_all_time_top")
async def top_groups_all_top(callback: CallbackQuery):
    top_groups = db.get_top_groups()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø
    if top_groups:
        group_statistic = "\n".join([
            f"{index + 1}.{group[1]} - {group[2]:.1f} –ª–∏—Ç—Ä"
            for index, group in enumerate(top_groups)
        ])
    else:
        group_statistic = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-–≥—Ä—É–ø–ø–∞—Ö
    await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –∫—ã–º—ã–∑–¥—ã –∫–æ–ø –∏—á–∫–µ–Ω –≥—Ä—É–ø–ø–∞–ª–∞—Ä:\n\n{group_statistic}",
                                     reply_markup=cancel_to_group_top)


@router.callback_query(F.data == "cancel")
async def cancel_tops(callback: CallbackQuery):
    await callback.message.edit_text(text="–°–∏–∑ –∫–∞–∞–ª–∞–≥–∞–Ω —Ç–æ–ø—Ç—É —Ç–∞–Ω–¥–∞–Ω—ã–∑", reply_markup=stat_kb)
