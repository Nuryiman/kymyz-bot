# from aiogram import Router
# from aiogram.types import CallbackQuery
#
# router = Router()
#
# @router.callback_query()
# async def top_groups(callback: CallbackQuery):
#     try:
#         if callback.data == "10stars":
#             await callback.message.answer_invoice(title="5 –ø–æ–ø—ã—Ç–æ–∫",
#                                                   description="5 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
#                                                   payload="10stars",
#                                                   currency="XTR",
#                                                   prices=[LabeledPrice(label="XTR", amount=10)])
#
#         if callback.data == "20stars":
#             await callback.message.answer_invoice(title="10 –ø–æ–ø—ã—Ç–æ–∫",
#                                                   description="10 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
#                                                   payload="20stars",
#                                                   currency="XTR",
#                                                   prices=[LabeledPrice(label="XTR", amount=20)])
#
#         if callback.data == "25stars":
#             await callback.message.answer_invoice(title="15 –ø–æ–ø—ã—Ç–æ–∫",
#                                                   description="15 –∞—Ä–∞–∫–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—É—É",
#                                                   payload="25stars",
#                                                   currency="XTR",
#                                                   prices=[LabeledPrice(label="XTR", amount=25)])
#
#         if callback.data == "top_groups" or "cancel_to_stat_group":
#             await callback.message.edit_text("–£–±–∞–∫—ã—Ç—Ç—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:", reply_markup=day_or_alltime_group_kb)
#
#         if callback.data == "top_players" or "cancel_to_stat":
#             await callback.message.edit_text("–£–±–∞–∫—ã—Ç—Ç—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:", reply_markup=day_or_alltime_kb)
#
#         if callback.data == "users_all_time_top":
#             top_users = db.get_global_top_users()
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             if top_users:
#                 user_statistic = "\n".join([
#                     f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
#                     for index, user in enumerate(top_users)
#                 ])
#             else:
#                 user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
#             await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}", reply_markup=cancel_to_users_top)
#
#         if callback.data == "users_day_top":
#             top_users = db.get_global_day_top_users()
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             if top_users:
#                 user_statistic = "\n".join([
#                     f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
#                     for index, user in enumerate(top_users)
#                 ])
#             else:
#                 user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
#             await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}", reply_markup=cancel_to_users_top)
#
#         if callback.data == "groups_day_top":
#             top_users = db.get_global_day_top_users()
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             if top_users:
#                 user_statistic = "\n".join([
#                     f"{index + 1}. {user[1]} - {user[2]:.1f} –ª–∏—Ç—Ä"
#                     for index, user in enumerate(top_users)
#                 ])
#             else:
#                 user_statistic = "–ì—Ä—É–ø–ø–∞–¥–∞ –æ—é–Ω—á—É –∂–æ–∫"
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
#             await callback.message.edit_text(f"ü•õüîùü•õ–ë–∏—Ä –∫—É–Ω–¥—É–Ω –∏—á–∏–Ω–¥–µ –≥–ª–æ–±–∞–ª–¥—É—É —ç–Ω –º—ã–∫—Ç—ã –æ—é–Ω—á—É–ª–∞—Ä:\n\n{user_statistic}",
#                                              reply_markup=cancel_to_group_top)
#
#         if callback.data == "groups_all_time_top":
#             top_groups = db.get_top_groups()
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø
#             if top_groups:
#                 group_statistic = "\n".join([
#                     f"{index + 1}.{group[1]} - {group[2]:.1f} –ª–∏—Ç—Ä"
#                     for index, group in enumerate(top_groups)
#                 ])
#             else:
#                 group_statistic = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö."
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–ø-–≥—Ä—É–ø–ø–∞—Ö
#             await callback.message.edit_text(f"ü•õüîùü•õ–ì–ª–æ–±–∞–ª–¥—É—É —ç–Ω –∫—ã–º—ã–∑–¥—ã –∫–æ–ø –∏—á–∫–µ–Ω –≥—Ä—É–ø–ø–∞–ª–∞—Ä:\n\n{group_statistic}",
#                                              reply_markup=cancel_to_group_top)
#         if callback.data == "cancel":
#             await callback.message.edit_text(text="–°–∏–∑ –∫–∞–∞–ª–∞–≥–Ω —Ç–æ–ø—Ç—É —Ç–∞–Ω–¥–∞–Ω—ã–∑", reply_markup=stat_kb)
#     except Exception:
#         await callback.answer('–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ', show_alert=True)
#
